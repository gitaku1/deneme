#!/bin/bash

LOG_FILE="/veri01/kill.txt"
DATE=$(date +"%Y-%m-%d %H:%M:%S")

# JupyterHub kullanıcısı tarafından çalıştırılan ilgili PID'leri bul
PIDS=$(ps -eo pid,etime,user,cmd | awk -v date="$DATE" -v log_file="$LOG_FILE" '
    $3 == "jupyterhub" && $4 ~ /\/tmp\/[^\/]+\/.local\/share\/jupyter\/runtime\/kernel-.*/ {
        split($2, time, "-")
        if (length(time) > 1 && time[1] >= 2) {
            print $1 " " $4 " " date >> log_file
            print $1
        }
    }
')

# Eğer uygun PID'ler bulunduysa, süreçleri sonlandır
if [[ ! -z "$PIDS" ]]; then
    echo "Aşağıdaki süreçler 2 günden fazla çalışıyor ve sonlandırılıyor:"
    echo "$PIDS"
    echo "$PIDS" | xargs kill -9
    echo "Kill edilen PID'ler ve bilgiler log dosyasına eklendi: $LOG_FILE"
else
    echo "2 günden fazla süredir çalışan uygun PID bulunamadı."
fi




#!/bin/bash

logfile="/veri01/kill.txt"
echo "[START] $(date) kill işlemi başlıyor" >> "$logfile"

ps -eo pid,etime,cmd h | while read pid etime cmdline; do
  # Komut satırında /tmp/user/.local/share/jupyter/runtime/kernel- içerenler (user ve kernel sonrası değişken)
  [[ "$cmdline" =~ \/tmp\/[^\/]+\/\.local\/share\/jupyter\/runtime\/kernel- ]] || continue

  # etime 2 günden uzun mu kontrolü (etime içinde - varsa gün var)
  [[ "$etime" == *-* ]] || continue

  days=${etime%%-*}  # Gün sayısını al

  if (( days >= 2 )); then
    echo "[FOUND] PID $pid - Süre: $etime - Komut: $cmdline" | tee -a "$logfile"
    if kill -9 "$pid" 2>/dev/null; then
      echo "[KILLED] $(date) PID=$pid Etimedays=$days Komut=\"$cmdline\"" >> "$logfile"
    else
      echo "[FAILED] $(date) PID=$pid öldürülemedi (izin veya başka sorun)" >> "$logfile"
    fi
  fi
done

echo "[END] $(date) kill işlemi tamamlandı" >> "$logfile"
