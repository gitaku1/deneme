import asyncio
from nbconvert import HTMLExporter
import nbformat
import logging
import os
from pyppeteer import launch

# ================== Ayarlar ==================

NOTEBOOK_PATH = "notebook_adi.ipynb"
HTML_PATH = "notebook.html"
PDF_PATH = "notebook.pdf"
CHROME_PATH = "/veri/01/chrome"  # Buraya sistemdeki Chrome'un tam path'ini ver

# ========== GeniÅŸ sayfalarda tÃ¼m iÃ§eriÄŸin sÄ±ÄŸmasÄ± iÃ§in Ã¶zel CSS ==========

CUSTOM_CSS = """
<style>
/* Sayfa boyutunu A4'e gÃ¶re optimize et */
@page {
    size: A4 landscape;
    margin: 1cm;
}

/* GeniÅŸ tablolar ve Ã§Ä±ktÄ±larÄ±n taÅŸmamasÄ± iÃ§in */
.output, .output_area pre {
    white-space: pre-wrap !important;
    word-wrap: break-word;
    overflow-x: auto;
    max-width: 100%;
    font-size: 9pt;
}

/* Kod ve markdown bloklarÄ± */
code, pre {
    font-size: 9pt !important;
    white-space: pre-wrap !important;
}

/* Genel stiller */
body {
    font-family: "Arial", sans-serif;
    font-size: 10pt;
    margin: 0;
    padding: 0;
}
</style>
"""

# ================== AdÄ±m 1: Notebook'u HTML'e dÃ¶nÃ¼ÅŸtÃ¼r ==================

print("ðŸ“˜ Notebook HTML'e dÃ¶nÃ¼ÅŸtÃ¼rÃ¼lÃ¼yor...")

with open(NOTEBOOK_PATH, "r", encoding="utf-8") as f:
    nb_node = nbformat.read(f, as_version=4)

html_exporter = HTMLExporter()
(body, _) = html_exporter.from_notebook_node(nb_node)

# HTML + CSS yaz
full_html = f"<html><head>{CUSTOM_CSS}</head><body>{body}</body></html>"

with open(HTML_PATH, "w", encoding="utf-8") as f:
    f.write(full_html)

print(f"âœ… HTML dosyasÄ± oluÅŸturuldu: {HTML_PATH}")

# ================== AdÄ±m 2: HTML'den PDF oluÅŸtur ==================

async def convert_html_to_pdf():
    try:
        logging.basicConfig(level=logging.INFO)
        print("ðŸ“„ PDF oluÅŸturuluyor...")

        browser = await launch(
            headless=True,
            executablePath=CHROME_PATH,
            args=["--no-sandbox", "--disable-gpu"],
            dumpio=True  # loglarÄ± terminale bas
        )
        page = await browser.newPage()

        html_path_abs = f"file://{os.path.abspath(HTML_PATH)}"
        print(f"ðŸ“‚ HTML yÃ¼kleniyor: {html_path_abs}")
        await page.goto(html_path_abs, {"waitUntil": "networkidle2"})

        # Sayfa tam yÃ¼klendiÄŸinde PDF Ã¼ret
        await page.pdf({
            "path": PDF_PATH,
            "format": "A4",
            "landscape": True,
            "printBackground": True,
            "margin": {
                "top": "0.5cm",
                "bottom": "0.5cm",
                "left": "0.5cm",
                "right": "0.5cm"
            }
        })

        await browser.close()
        print(f"âœ… PDF baÅŸarÄ±yla oluÅŸturuldu: {PDF_PATH}")

    except Exception as e:
        print("â›” PDF oluÅŸturulurken hata oluÅŸtu:")
        print(str(e))

# ================== Event Loop Sorununu AÅŸmak iÃ§in Ã‡alÄ±ÅŸtÄ±rma ==================

def run_asyncio_task(task):
    try:
        asyncio.get_running_loop()
        # EÄŸer bir event loop zaten Ã§alÄ±ÅŸÄ±yorsa
        import nest_asyncio
        nest_asyncio.apply()
    except RuntimeError:
        # Event loop yoksa, normal baÅŸlat
        pass
    asyncio.run(task)

run_asyncio_task(convert_html_to_pdf())
