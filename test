import asyncio
import os
import logging
import time
from nbconvert import HTMLExporter
import nbformat
from pyppeteer import launch
import nest_asyncio

# KullanÄ±cÄ± ayarlarÄ±
NOTEBOOK_PATH = "notebook_adi.ipynb"
HTML_PATH = "notebook.html"
PDF_PATH = "notebook.pdf"
CHROME_PATH = "/veri/01/chrome"  # Yerel chrome path

# PDF boyutu ve CSS ayarÄ± (sayfaya sÄ±ÄŸmasÄ± iÃ§in!)
CUSTOM_CSS = """
<style>
@page {
    size: A4 landscape;
    margin: 1cm;
}
body {
    font-family: Arial, sans-serif;
    font-size: 10px;
}
.output, .output_area pre, pre {
    white-space: pre-wrap !important;
    word-wrap: break-word;
    overflow-x: auto;
    max-width: 100%;
    font-size: 9pt;
}
table {
    table-layout: auto !important;
    width: 100% !important;
    overflow-x: auto;
    display: block;
}
td, th {
    word-wrap: break-word;
    font-size: 9pt;
    padding: 4px;
}
</style>
"""

def log_step(msg):
    print(f"[{time.strftime('%H:%M:%S')}] {msg}")

# 1. HTML'e dÃ¶nÃ¼ÅŸtÃ¼r
def convert_notebook_to_html():
    log_step("Notebook HTML'e dÃ¶nÃ¼ÅŸtÃ¼rÃ¼lÃ¼yor...")
    with open(NOTEBOOK_PATH, "r", encoding="utf-8") as f:
        nb_node = nbformat.read(f, as_version=4)
    html_exporter = HTMLExporter()
    (body, _) = html_exporter.from_notebook_node(nb_node)
    full_html = f"<html><head>{CUSTOM_CSS}</head><body>{body}</body></html>"
    with open(HTML_PATH, "w", encoding="utf-8") as f:
        f.write(full_html)
    log_step(f"âœ… HTML yazÄ±ldÄ±: {HTML_PATH}")

# 2. PDF'e dÃ¶nÃ¼ÅŸtÃ¼r
async def convert_html_to_pdf():
    log_step("Chrome baÅŸlatÄ±lÄ±yor...")
    browser = await launch(
        headless=True,
        executablePath=CHROME_PATH,
        args=["--no-sandbox", "--disable-gpu"],
        dumpio=True
    )
    page = await browser.newPage()
    html_url = f"file://{os.path.abspath(HTML_PATH)}"
    log_step(f"HTML sayfasÄ± yÃ¼kleniyor: {html_url}")
    await page.goto(html_url, {"waitUntil": "networkidle2"})

    log_step("ðŸ“„ PDF yazdÄ±rÄ±lÄ±yor, sabÄ±rla bekleyin...")
    await page.pdf({
        "path": PDF_PATH,
        "format": "A4",
        "landscape": True,
        "printBackground": True,
        "margin": {"top": "1cm", "bottom": "1cm", "left": "1cm", "right": "1cm"}
    })

    await browser.close()
    log_step(f"âœ… PDF oluÅŸturuldu: {PDF_PATH}")

# 3. Event loop sorunu Ã§Ã¶z
def start_pdf_conversion():
    try:
        asyncio.get_running_loop()
        nest_asyncio.apply()
    except RuntimeError:
        pass
    asyncio.run(convert_html_to_pdf())

# Ana Ã§alÄ±ÅŸma
if __name__ == "__main__":
    start_time = time.time()
    try:
        convert_notebook_to_html()
        start_pdf_conversion()
        elapsed = time.time() - start_time
        log_step(f"ðŸŽ‰ TamamlandÄ±! Toplam sÃ¼re: {round(elapsed, 2)} saniye")
    except Exception as e:
        log_step(f"â›” HATA: {str(e)}")
