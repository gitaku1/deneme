import asyncio
from pyppeteer import launch
from nbconvert import HTMLExporter
import nbformat
import os
import time
import nest_asyncio

# üìç Yollar
IPYNB_PATH = "/veri01/ipynbdirectory/notebook.ipynb"
HTML_PATH = "/veri01/ipynbdirectory/notebook_rendered.html"
PDF_OUTPUT_PATH = "/veri01/ipynbdirectory/notebook.pdf"
CHROME_PATH = "/veri01/chrome-linux/chrome"

def log_step(msg):
    print(f"[{time.strftime('%H:%M:%S')}] {msg}")

# ‚úÖ 1. Notebook'u y√ºkle
log_step("Notebook y√ºkleniyor...")
with open(IPYNB_PATH, "r", encoding="utf-8") as f:
    nb_node = nbformat.read(f, as_version=4)

# ‚úÖ 2. HTML'e d√∂n√º≈üt√ºr
log_step("Notebook HTML'e d√∂n√º≈üt√ºr√ºl√ºyor...")
html_exporter = HTMLExporter()
html_exporter.exclude_input_prompt = True
html_exporter.exclude_output_prompt = True

# ‚úÖ 3. CSS Ekle: geni≈ü kolonlar, √ßƒ±ktƒ±lar, yazdƒ±rmaya uygun
custom_css = """
<style>
body {
    font-size: 10px;
    -webkit-print-color-adjust: exact;
    print-color-adjust: exact;
    overflow-x: auto;
}
.output_area, table, pre, code {
    font-size: 10px !important;
    white-space: pre-wrap !important;
    word-wrap: break-word !important;
    overflow-x: auto !important;
    max-width: 100% !important;
}
div.output_scroll {
    overflow-x: auto !important;
    max-width: 100% !important;
}
</style>
"""

html_data, _ = html_exporter.from_notebook_node(nb_node)
html_data = html_data.replace("</head>", custom_css + "</head>")

log_step(f"HTML dosyasƒ± {HTML_PATH} olarak kaydediliyor...")
with open(HTML_PATH, "w", encoding="utf-8") as f:
    f.write(html_data)

# ‚úÖ 4. PDF'e d√∂n√º≈üt√ºr
async def generate_pdf():
    log_step("Chrome ba≈ülatƒ±lƒ±yor...")
    browser = await launch(
        executablePath=CHROME_PATH,
        headless=True,
        dumpio=True,
        args=[
            "--no-sandbox",
            "--disable-gpu",
            "--disable-dev-shm-usage",
            "--disable-setuid-sandbox",
            "--single-process",
            "--no-zygote"
        ]
    )

    log_step("Yeni sekme a√ßƒ±lƒ±yor...")
    page = await browser.newPage()

    log_step("HTML sayfasƒ± y√ºkleniyor...")
    await page.goto(f"file://{os.path.abspath(HTML_PATH)}", {'waitUntil': 'networkidle0'})

    log_step("PDF olarak kaydediliyor...")
    await page.pdf({
        'path': PDF_OUTPUT_PATH,
        'format': 'A4',
        'printBackground': True,
        'margin': {'top': '0.5cm', 'bottom': '0.5cm', 'left': '0.5cm', 'right': '0.5cm'},
        'scale': 0.8,
        'landscape': True
    })

    log_step("Tarayƒ±cƒ± kapatƒ±lƒ±yor...")
    await browser.close()
    log_step(f"PDF olu≈üturuldu: {PDF_OUTPUT_PATH}")

# ‚úÖ 5. Event loop kontrol√º
log_step("PDF olu≈üturma i≈ülemi ba≈ülatƒ±lƒ±yor...")
try:
    loop = asyncio.get_event_loop()
    if loop.is_running():
        nest_asyncio.apply()
    loop.run_until_complete(generate_pdf())
except Exception as e:
    log_step(f"HATA: {e}")
