from IPython.core.interactiveshell import InteractiveShell
import builtins

# !pip komutlarını engelle
_original_system = InteractiveShell.system
def block_system_cmd(cmd):
    if "pip" in cmd:
        raise RuntimeError("🚫 !pip komutları Jupyter arayüzünde engellenmiştir.")
    return _original_system(cmd)

InteractiveShell.system = block_system_cmd

# %pip büyüsünü engelle
from IPython.core.magic import register_line_magic

@register_line_magic
def pip(line):
    raise RuntimeError("🚫 %pip komutu Jupyter arayüzünde engellenmiştir.")

# import pip'i engelle
_real_import = builtins.__import__
def secure_import(name, *args, **kwargs):
    if name == "pip":
        raise RuntimeError("🚫 pip modülüne erişim engellenmiştir.")
    return _real_import(name, *args, **kwargs)

builtins.__import__ = secure_import



import os
import nbformat
from nbconvert import HTMLExporter
from weasyprint import HTML
from bs4 import BeautifulSoup

IPYNB_PATH = "/veri01/ipynbdirectory/notebook.ipynb"
PDF_OUTPUT_PATH = "/veri01/ipynbdirectory/only_outputs_cleaned.pdf"

BASE_CSS = """
<style>
@page {
    size: A4 portrait;
    margin: 1cm;
}
@page rotated {
    size: A4 landscape;
    margin: 1cm;
}
body {
    font-family: "DejaVu Sans", sans-serif;
    font-size: 9pt;
}
pre, code {
    font-size: 8pt !important;
    white-space: pre-wrap !important;
    word-wrap: break-word;
}
.output_area pre, .output_area div {
    white-space: pre-wrap !important;
    word-break: break-word !important;
    overflow-x: auto !important;
}
.output_scroll {
    overflow-x: auto !important;
    max-height: none !important;
}
.output_wrapper, .output {
    page-break-inside: avoid !important;
}
.table-wide {
    page: rotated;
    font-size: 7pt;
    width: 100%;
    table-layout: auto;
    display: block;
    overflow-x: auto;
}
table {
    width: 100%;
    word-wrap: break-word;
    font-size: 8pt;
    table-layout: auto;
}
td, th {
    padding: 2px;
    text-overflow: clip;
    overflow-wrap: break-word;
}
</style>
"""

LONG_OUTPUT_STYLE = 'font-size:6pt; line-height:1.1em;'
LONG_OUTPUT_CHAR_LIMIT = 5000
TABLE_COLUMN_LIMIT = 8

def convert_outputs_only_clean():
    print("📘 Notebook okunuyor...")
    with open(IPYNB_PATH, "r", encoding="utf-8") as f:
        nb = nbformat.read(f, as_version=4)

    html_exporter = HTMLExporter()
    html_exporter.exclude_input = True
    html_exporter.exclude_input_prompt = True
    html_exporter.exclude_output_prompt = True
    body, _ = html_exporter.from_notebook_node(nb)

    soup = BeautifulSoup(body, "html.parser")

    seen_outputs = set()
    cleaned_outputs = []

    print("🔍 Çıktılar analiz ediliyor...")
    for output_div in soup.find_all("div", class_="output_area"):
        text = output_div.get_text(strip=True)
        if not text or text in seen_outputs:
            output_div.decompose()  # Boş veya tekrar eden output’u sil
            continue
        seen_outputs.add(text)

        if len(text) > LONG_OUTPUT_CHAR_LIMIT:
            for tag in output_div.find_all(["pre", "code", "div"]):
                tag['style'] = tag.get('style', '') + LONG_OUTPUT_STYLE

        cleaned_outputs.append(output_div)

    for table in soup.find_all("table"):
        header = table.find("tr")
        if header:
            columns = header.find_all(["td", "th"])
            if len(columns) >= TABLE_COLUMN_LIMIT:
                table['class'] = table.get('class', []) + ['table-wide']

    # Gereksiz boş alanları da temizle (güncellenmiş hata korumalı satır)
    for tag in soup.find_all():
        if not tag.get_text(strip=True) and not (tag.name and tag.name.startswith('img')):
            tag.decompose()

    print("📄 Temizlenmiş PDF oluşturuluyor...")
    final_html = BASE_CSS + str(soup)
    HTML(string=final_html).write_pdf(PDF_OUTPUT_PATH)
    print(f"✅ PDF başarıyla oluşturuldu: {PDF_OUTPUT_PATH}")

convert_outputs_only_clean()
